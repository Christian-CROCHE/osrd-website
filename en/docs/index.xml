<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OSRD – Documentation</title><link>https://osrd.fr/en/docs/</link><description>Recent content in Documentation on OSRD</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://osrd.fr/en/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Physical modeling</title><link>https://osrd.fr/en/docs/explanation/running_time_calculation/physical_modeling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/running_time_calculation/physical_modeling/</guid><description>
&lt;!-- script to auto-render KaTeX extension $$..$$ for outline formula, \\(...\\) for inline formula -->
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.css" integrity="sha384-KiWOvVjnN8qwAZbuQyWDIbfCLFhLXNETzBQjA/92pIowpC0d2O3nppDGQVgwd2nB" crossorigin="anonymous">
&lt;script defer src="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.js" integrity="sha384-0fdwu/T/EQMsQlrHCCHoH10pkPLlKA1jL5dFyUOvB3lfeT2540/2g6YgSi2BL14p" crossorigin="anonymous">&lt;/script>
&lt;script defer src="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/contrib/auto-render.min.js" integrity="sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR" crossorigin="anonymous"
onload="renderMathInElement(document.body);">&lt;/script>
&lt;script src="https://polyfill.io/v3/polyfill.min.js?features=es6">&lt;/script>
&lt;script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">&lt;/script>
&lt;p>Physical modelling plays an important role in the OSRD core calculation. It allows us to simulate train traffic, and it must be as realistic as possible train traffic, and it must be as realistic as possible.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="force-review">Force review&lt;/h3>
&lt;/font>
&lt;p>To calculate the displacement of the train over time, we must first calculate its speed at each instant.
A simple way to obtain this speed is to calculate the acceleration.
Thanks to the fundamental principle of dynamics, the acceleration of the train at each instant is directly dependent on the different forces applied to it: $$ \sum \vec{F}=m\vec{a} $$&lt;/p>
&lt;p>&lt;img src="../forces.png" alt="Running time">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Traction&lt;/strong>: The value of the traction force \(F_{mot}\) depends on several factors:&lt;/p>
&lt;ul>
&lt;li>the rolling stock&lt;/li>
&lt;li>the speed of the train, \(v^{\prime}x\) according to the effort-speed curve below:&lt;/li>
&lt;/ul>
&lt;p>$$ {\vec{F_{mot}}(v_{x^{\prime}}, x^{\prime})=F_{mot}(v_{x^{\prime}}, x^{\prime})\vec{e_x^{\prime}}} $$&lt;/p>
&lt;p>&lt;img src="../effort-vitesse.png" alt="Running time" title="Example of a train effort-speed curve">&lt;/p>
&lt;blockquote>
&lt;p>The &lt;strong>x&lt;/strong> axis represents the speed of the train in [km/h], the &lt;strong>y&lt;/strong> axis the value of the traction force in [kN].&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>the action of the driver, who accelerates more or less strongly depending on where he is on his journey&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br>
&lt;ul>
&lt;li>&lt;strong>Braking&lt;/strong> : The value of the braking force \(F_{brk}\) also depends on the rolling stock and the driver&amp;rsquo;s action but has a constant value for a given rolling stock. In the current state of modelling, braking is either zero or at its maximum value.&lt;/li>
&lt;/ul>
&lt;p>$$ \vec{F_{brk}}(x^{\prime})=-F_{brk}(x^{\prime}){\vec{e_{x^{\prime}}}} $$&lt;/p>
&lt;p>A second approach to modelling braking is the so-called hourly approach, as it is used for hourly production at SNCF. In this case, the deceleration is fixed and the braking no longer depends on the different forces applied to the train. Typical deceleration values range from 0.4 to 0.7m/s².&lt;/p>
&lt;br>
&lt;ul>
&lt;li>&lt;strong>Forward resistance&lt;/strong>: To model the forward resistance of the train, the Davis formula is used, which takes into account all the friction and aerodynamic resistance of the air. The value of the drag depends on the speed \(v^{\prime}_x\). The coefficients \(A\), \(B\), et \(C\) depend on the rolling stock.&lt;/li>
&lt;/ul>
&lt;p>$$ {\vec{R}(v_{x^{\prime}})}=-(A+Bv_{x^{\prime}}+{Cv_{x^{\prime}}}^2){\vec{e_{x^{\prime}}}} $$&lt;/p>
&lt;br>
&lt;ul>
&lt;li>&lt;strong>Weight (slopes + turns)&lt;/strong> : The weight force given by the product between the mass \(m\) of the train and the gravitational constant \(g\) is projected on the axes \(\vec{e_x}^{\prime}\) and \(\vec{e_y}^{\prime}\).For projection, we use the angle \(i(x^{\prime})\), which is calculated from the slope angle \(s(x^{\prime})\) corrected by a factor that takes into account the effect of the turning radius \(r(x^{\prime})\).&lt;/li>
&lt;/ul>
&lt;p>$$
\vec{P(x^{\prime})}=-mg\vec{e_y}(x^{\prime})=
-mg\Big[sin\big(i(x^{\prime})\big){\vec{e_{x^{\prime}}}(x^{\prime})}+cos\big(i(x^{\prime})\big){\vec{e_{{\prime}}}(x^{\prime})}\Big]
$$&lt;/p>
&lt;p>$$ i(x^{\prime})= s(x^{\prime})+\frac{800m}{r(x^{\prime})} $$&lt;/p>
&lt;br>
&lt;ul>
&lt;li>&lt;strong>Ground Reaction&lt;/strong> : The ground reaction force simply compensates for the vertical component of the weight, but has no impact on the dynamics of the train as it has no component along the axis \({\vec{e_x}^{\prime}}\).&lt;/li>
&lt;/ul>
&lt;p>$$ \vec{R_{gnd}}=R_{gnd}{\vec{e_{y^{\prime}}}} $$&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="forces-balance">Forces balance&lt;/h3>
&lt;/font>
&lt;p>The equation of the fundamental principle of dynamics projected onto the axis \({\vec{e_x}^{\prime}}\) (in the train frame of reference) gives the following scalar equation:&lt;/p>
&lt;p>$$
a_{x^{\prime}}(t) = \frac{1}{m}\Big
[F_{mot}(v_{x^{\prime}}, x^{\prime})-F_{brk}(x^{\prime})-(A+Bv_{x^{\prime}}+{Cv_{x^{\prime}}}^2)-mgsin(i(x^{\prime}))\Big]
$$&lt;/p>
&lt;p>This is then simplified by considering that despite the gradient the train moves on a plane and by amalgamating
\(\vec{e_x}\) and \(\vec{e_x}^{\prime}\). The gradient still has an impact on the force balance, but it is assumed that the train is only moving horizontally, which gives the following simplified equation:&lt;/p>
&lt;p>$$ a_{x}(t) = \frac{1}{m}\Big[F_{mot}(v_{x}, x)-F_{brk}(x)-(A+Bv_{x}+{Cv_{x}}^2)-mgsin(i(x))\Big] $$&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="resolution">Resolution&lt;/h3>
&lt;/font>
&lt;p>The driving force and the braking force depend on the driver&amp;rsquo;s action (he decides to accelerate or brake more or less strongly depending on the situation). This dependence is reflected in the dependence of these two forces on the position of the train. The weight component is also dependent on the position of the train, as it comes directly from the slopes and bends below the train.&lt;/p>
&lt;p>In addition, the driving force depends on the speed of the train (according to the speed effort curve) as does the resistance to forward motion.
resistance.&lt;/p>
&lt;p>These different dependencies make it impossible to solve this equation analytically, and the acceleration of the train at each moment must be calculated by numerical integration.&lt;/p></description></item><item><title>About: Strategic timetable</title><link>https://osrd.fr/en/about/use-case/strategic-timetable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/about/use-case/strategic-timetable/</guid><description>
&lt;font color=#aa026d>
&lt;h3 id="presentation">Presentation&lt;/h3>
&lt;/font>
&lt;p>A first phase of the transportation plan design process starts very early: Y-10 of the day the train is to run and aims to &lt;strong>propose several traffic scenarios&lt;/strong> on existing or prospective rail infrastructure. In this phase, SNCF Réseau, the French railway infrastructure manager and responsible for the allocation and sale of train paths, collects requests from &lt;strong>OA&lt;/strong> (Organizing Authorities) and &lt;strong>RC&lt;/strong> (Railway Companies) in terms of mobility. The requests will be transmitted in the form of &lt;strong>service plans&lt;/strong>. A service plan is a way of representing the requested trains, their route and the stops to be served.&lt;/p>
&lt;p>The &lt;strong>OSRD Strategic Schedules&lt;/strong> product has been designed to build an operating plan from the service diagrams, based on &lt;strong>rail infrastructure modeling, running calculation and simulation&lt;/strong>. Building an operating plan means scheduling the trains presented on the service diagrams in a way that best meets the mobility needs. The OSRD tool provides a database with a &lt;strong>micro-model of the French railway infrastructure&lt;/strong> as well as the &lt;strong>rolling stock already in use in France&lt;/strong>. Moreover, an interface to modify the existing infrastructure or to design a new part of the infrastructure is proposed. The output products of the &amp;ldquo;&lt;strong>OSRD Strategic Schedules&lt;/strong>&amp;rdquo; process are timetables where the train schedules are displayed. A graphical representation of the timetables is thus proposed.&lt;/p>
&lt;p>A comprehensive and strategic view of the timetable planning is crucial to improve rail performance. &lt;strong>The ultimate goal is to meet mobility needs by optimizing line capacity utilization, station track occupancy and material turnover&lt;/strong>. To meet this optimization requirement, we are working to implement mathematical modeling and resolution modules coupled with the simulator.&lt;/p></description></item><item><title>Docs: Numerical integration</title><link>https://osrd.fr/en/docs/explanation/running_time_calculation/numerical_integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/running_time_calculation/numerical_integration/</guid><description>
&lt;!-- script to auto-render KaTeX extension : $$...$$ for outline formula, \\(...\\) for inline formula -->
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.css" integrity="sha384-KiWOvVjnN8qwAZbuQyWDIbfCLFhLXNETzBQjA/92pIowpC0d2O3nppDGQVgwd2nB" crossorigin="anonymous">
&lt;script defer src="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.js" integrity="sha384-0fdwu/T/EQMsQlrHCCHoH10pkPLlKA1jL5dFyUOvB3lfeT2540/2g6YgSi2BL14p" crossorigin="anonymous">&lt;/script>
&lt;script defer src="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/contrib/auto-render.min.js" integrity="sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR" crossorigin="anonymous"
onload="renderMathInElement(document.body);">&lt;/script>
&lt;script src="https://polyfill.io/v3/polyfill.min.js?features=es6">&lt;/script>
&lt;script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">&lt;/script>
&lt;font color=#aa026d>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;/font>
&lt;p>Since physical modelling has shown that the acceleration of the train is influenced by various factors that vary along the route (gradient, curvature, engine traction force, etc.), the calculation must be carried out using a numerical integration method. The path is then separated into sufficiently short steps to consider all these factors as constant, which allows this time to use the equation of motion to calculate the displacement and speed of the train.&lt;/p>
&lt;p>Euler&amp;rsquo;s method of numerical integration is the simplest way of doing this, but it has a number of drawbacks. This article explains the Euler method, why it is not suitable for OSRD purposes and which integration method should be used instead.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="eulers-method">Euler&amp;rsquo;s method&lt;/h3>
&lt;/font>
&lt;p>The Euler method applied to the integration of the equation of motion of a train is:&lt;/p>
&lt;p>$$v(t+dt) = a(v(t), x(t))dt + v(t)$$&lt;/p>
&lt;p>$$x(t+dt) = \frac{1}{2}a(v(t), x(t))dt^2 + v(t)dt + x(t)$$&lt;/p>
&lt;center>
&lt;p>&lt;img src="../euler.png?style=method" alt="Euler&amp;amp;rsquo;s method">&lt;/p>
&lt;/center>
&lt;p>&amp;nbsp;&lt;/p>
&lt;h4 id="advantages-of-eulers-method">&lt;strong>Advantages of Euler&amp;rsquo;s method&lt;/strong>&lt;/h4>
&lt;p>The advantages of the Euler method are that it is very simple to implement and has a rather fast calculation for a given time step, compared to other numerical integration methods (see &lt;a href="#the-choice-of-integration-method-for-osrd">appendix&lt;/a>)&lt;/p>
&lt;h4 id="disadvantages-of-the-eulers-method">&lt;strong>Disadvantages of the Euler&amp;rsquo;s method&lt;/strong>&lt;/h4>
&lt;p>The Euler integration method presents a number of problems for OSRD:&lt;/p>
&lt;ul>
&lt;li>It is relatively imprecise, and therefore requires a small time step, which generates a lot of data.&lt;/li>
&lt;li>With time integration, only the conditions at the starting point of the integration step (gradient, infrastructure parameters, etc.) are known, as one cannot predict precisely where it will end.&lt;/li>
&lt;li>We cannot anticipate future changes in the directive: the train only reacts by comparing its current state with its set point at the same time. To illustrate, it is as if the driver is unable to see ahead, whereas in reality he anticipates according to the signals, slopes and bends he sees ahead.&lt;/li>
&lt;/ul>
&lt;font color=#aa026d>
&lt;h3 id="runge-kuttas-4-method">Runge-Kutta&amp;rsquo;s 4 method&lt;/h3>
&lt;/font>
&lt;p>The Runge-Kutta 4 method applied to the integration of the equation of motion of a train is:&lt;/p>
&lt;p>$$v(t+dt) = v(t) + \frac{1}{6}(k_1 + 2k_2 + 2k_3 + k_4)dt$$&lt;/p>
&lt;p>With:&lt;/p>
&lt;p>$$k_1 = a(v(t), x(t))$$&lt;/p>
&lt;p>$$k_2 = a\Big(v(t+k_1\frac{dt}{2}), x(t) + v(t)\frac{dt}{2} + k_1\frac{dt^2}{8}\Big)$$&lt;/p>
&lt;p>$$k_3 = a\Big(v(t+k_2\frac{dt}{2}), x(t) + v(t)\frac{dt}{2} + k_2\frac{dt^2}{8}\Big)$$&lt;/p>
&lt;p>$$k_4 = a\Big(v(t+k_3dt), x(t) + v(t)dt + k_3\frac{dt^2}{2}\Big)$$&lt;/p>
&lt;center>
&lt;p>&lt;img src="../rk4.png?style=method" alt="Runge-Kutta 4&amp;amp;rsquo;s method">&lt;/p>
&lt;/center>
&lt;p>&amp;nbsp;&lt;/p>
&lt;h4 id="advantages-of-runge-kuttas-4-method">&lt;strong>Advantages of Runge Kutta&amp;rsquo;s 4 method&lt;/strong>&lt;/h4>
&lt;p>Runge Kutta&amp;rsquo;s method of integration 4 addresses the various problems raised by Euler&amp;rsquo;s method:&lt;/p>
&lt;ul>
&lt;li>It allows the anticipation of directive changes within a calculation step, thus representing more accurately the reality of driving a train.&lt;/li>
&lt;li>It is more accurate for the same calculation time (see &lt;a href="#the-choice-of-integration-method-for-osrd">appendix&lt;/a>), allowing for larger integration steps and therefore fewer data points.&lt;/li>
&lt;/ul>
&lt;h4 id="disavantages-of-runge-kuttas-4-method">&lt;strong>Disavantages of Runge Kutta&amp;rsquo;s 4 method&lt;/strong>&lt;/h4>
&lt;p>The only notable drawback of the Runge Kutta 4 method encountered so far is its difficulty of implementation.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="the-choice-of-integration-method-for-osrd">The choice of integration method for OSRD&lt;/h3>
&lt;/font>
&lt;h4 id="study-of-accuracy-and-speed-of-calculation">&lt;strong>Study of accuracy and speed of calculation&lt;/strong>&lt;/h4>
&lt;p>Different integration methods could have replaced the basic Euler integration in the OSRD algorithm. In order to decide which method would be most suitable, a study of the accuracy and computational speed of different methods was carried out. This study compared the following methods:&lt;/p>
&lt;ul>
&lt;li>Euler&lt;/li>
&lt;li>Euler-Cauchy&lt;/li>
&lt;li>Runge-Kutta 4&lt;/li>
&lt;li>Adams 2&lt;/li>
&lt;li>Adams 3&lt;/li>
&lt;/ul>
&lt;p>All explanations of these methods can be found (in french) in &lt;a href="https://github.com/DGEXSolutions/osrd/wiki/documents/integration/MethodesNumeriques_EricGoncalves.pdf">this document&lt;/a>, and the python code used for the simulation is &lt;a href="https://raw.githubusercontent.com/wiki/DGEXSolutions/osrd/code/integration/Tests_precision.py">here&lt;/a>.&lt;/p>
&lt;p>The simulation calculates the position and speed of a high-speed train accelerating on a flat straight line.&lt;/p>
&lt;h4 id="equivalent-time-step-simulations">&lt;strong>Equivalent time step simulations&lt;/strong>&lt;/h4>
&lt;p>A reference curve was simulated using the Euler method with a time step of 0.1s, then the same path was simulated using the other methods with a time step of 1s. It is then possible to simply compare each curve to the reference curve, by calculating the absolute value of the difference at each calculated point. The resulting absolute error of the train&amp;rsquo;s position over its distance travelled is as follows:&lt;/p>
&lt;p>&lt;img src="../precisions_h_equivalent.png" alt="precisions_h_equivalent">&lt;/p>
&lt;p>It is immediately apparent that the Euler method is less accurate than the other four by about an order of magnitude. Each curve has a peak where the accuracy is extremely high (extremely low error), which is explained by the fact that all curves start slightly above the reference curve, cross it at one point and end slightly below it, or &lt;em>vice versa&lt;/em>.&lt;/p>
&lt;p>As accuracy is not the only important indicator, the calculation time of each method was measured. This is what we get for the same input parameters:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Integration method&lt;/th>
&lt;th style="text-align:right">Calculation time (s)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Euler&lt;/td>
&lt;td style="text-align:right">1.86&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Euler-Cauchy&lt;/td>
&lt;td style="text-align:right">3.80&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Runge-Kutta 4&lt;/td>
&lt;td style="text-align:right">7.01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Adams 2&lt;/td>
&lt;td style="text-align:right">3.43&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Adams 3&lt;/td>
&lt;td style="text-align:right">5.27&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Thus, Euler-Cauchy and Adams 2 are about twice as slow as Euler, Adams 3 is about three times as slow, and RK4 is about four times as slow. These results have been verified on much longer simulations, and the different ratios are maintained.&lt;/p>
&lt;h4 id="simulation-with-equivalent-calculation-time">&lt;strong>Simulation with equivalent calculation time&lt;/strong>&lt;/h4>
&lt;p>As the computation times of all methods depend linearly on the time step, it is relatively simple to compare the accuracy for approximately the same computation time. Multiplying the time step of Euler-Cauchy and Adams 2 by 2, the time step of Adams 3 by 3, and the time step of RK4 by 4, here are the resulting absolute error curves:&lt;/p>
&lt;p>&lt;img src="../precisions_time_equivalent.png" alt="precisions_time_equivalent">&lt;/p>
&lt;p>And here are the calculation times:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Integration method&lt;/th>
&lt;th style="text-align:right">Calculation time (s)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Euler&lt;/td>
&lt;td style="text-align:right">1.75&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Euler-Cauchy&lt;/td>
&lt;td style="text-align:right">2.10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Runge-Kutta 4&lt;/td>
&lt;td style="text-align:right">1.95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Adams 2&lt;/td>
&lt;td style="text-align:right">1.91&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Adams 3&lt;/td>
&lt;td style="text-align:right">1.99&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>After some time, RK4 tends to be the most accurate method, slightly more accurate than Euler-Cauchy, and still much more accurate than the Euler method.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="conclusions-of-the-study">Conclusions of the study&lt;/h3>
&lt;/font>
&lt;p>The study of accuracy and computational speed presented above shows that RK4 and Euler-Cauchy would be good candidates to replace the Euler algorithm in OSRD: both are fast, accurate, and could replace the Euler method without requiring large implementation changes because they only compute within the current time step.
&lt;strong>It was decided that OSRD would use the Runge-Kutta 4 method because it is slightly more accurate than Euler-Cauchy and it is a well-known method for this type of calculation, so it is very suitable for an open-source simulator.&lt;/strong>&lt;/p>
&lt;style>
img[src$="method"] {
height: 70%;
width: 70%;
}
&lt;/style></description></item><item><title>Docs: Architecture</title><link>https://osrd.fr/en/docs/reference/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/architecture/</guid><description>
&lt;p>It is a multi-service architecture where several software components interact with each other. This choice was made to ensure the modularity of the code and to guarantee the exploitability of certain OSRD services by external applications.&lt;/p>
&lt;p>&lt;img src="../architecture.en.svg" alt="Projet Architecture">&lt;/p></description></item><item><title>About: Exploitation studies</title><link>https://osrd.fr/en/about/use-case/exploitation-studies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/about/use-case/exploitation-studies/</guid><description>
&lt;font color=#aa026d>
&lt;h3 id="presentation">Presentation&lt;/h3>
&lt;/font>
&lt;p>Millions of Euros are invested each year in rail projects on the basis of operational studies. The objectives of these studies are &lt;strong>to match transport needs with the rail infrastructure and to assess the capacity of the network to meet these needs&lt;/strong>. Operational studies, which are strategic and crucial for informing public investment decisions concerning the future of the rail network and for the performance of the rail system, require rare and exclusive skills and &lt;strong>currently produce scattered and poorly capitalized data&lt;/strong>. For this reason, SNCF Réseau has chosen in 2019 to equip itself with an in-house tool to carry out these studies.&lt;/p>
&lt;p>The &amp;ldquo;&lt;strong>OSRD Operational Studies&lt;/strong>&amp;rdquo; project was born in response to the shortcomings of the market: numerous and expensive tools, closed and with non-comparable results. On the contrary, we propose a reference tool accessible to all, whose results are transparent, explicit and universal. The OSRD tool provides a database with a microscopic modeling of the French railway infrastructure (gradients, radii of curvature, limiting speeds). An interface to modify the existing infrastructure or to design a new part of the infrastructure is proposed.
Thanks to this modeling and to its running calculation engine, OSRD can calculate routes, draw paths, simulate trains and their interaction with the signaling system.
OSRD meets the &lt;strong>stakes of sustainable mobility&lt;/strong> by optimizing energy consumption. The expected regularity margin on the running of a train is distributed according to an &lt;strong>algorithm that minimizes the energy consumed by the train during the journey&lt;/strong>.&lt;/p>
&lt;p>An interesting element of verification of an exploitation scenario is &lt;strong>the evaluation of the robustness&lt;/strong> of what is projected. For this function, a &lt;strong>stochastic simulation module&lt;/strong> is proposed. Hazards can be modeled and injected into the simulator to evaluate the consequences and the ability of the system to return to balance.&lt;/p></description></item><item><title>Docs: Infrastructure data</title><link>https://osrd.fr/en/docs/explanation/data-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/data-model/</guid><description>
&lt;font color=#aa026d>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;/font>
&lt;p>This page gives an example of how the data formats are used to describe an infrastructure in &lt;strong>OSRD&lt;/strong>.&lt;/p>
&lt;p>For this purpose, let&amp;rsquo;s take as an example the following toy infrastructure:&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_diagram.drawio.en.svg" alt="Toy infrastructure diagram">&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Tip&lt;/h4>
To zoom in on diagrams, click on the edit button that appears when hovering over it.
&lt;/div>
&lt;p>This diagram is an overview of the infrastructure with lines and stations only.&lt;/p>
&lt;p>This infrastructure is not meant to be realistic, but rather meant to help illustrate OSRD&amp;rsquo;s data model.
This example will be created step by step and explained along the way.&lt;/p>
&lt;h4 id="the-infrastructure-generator">The infrastructure generator&lt;/h4>
&lt;p>In the &lt;a href="https://github.com/DGEXSolutions/osrd">&lt;em>OSRD&lt;/em> repository&lt;/a> is a &lt;a href="https://github.com/DGEXSolutions/osrd/tree/dev/core/examples/generated">python library&lt;/a> designed to help generate infrastructures in a format understood by &lt;em>OSRD&lt;/em>.&lt;/p>
&lt;p>The infrastructure discussed in this section can be generated thanks to &lt;a href="https://github.com/DGEXSolutions/osrd/blob/dev/core/examples/generated/scripts/small_infra.py">small_infra.py&lt;/a> file. To learn more about the generation scripts, you can check out the related &lt;a href="https://github.com/DGEXSolutions/osrd/blob/dev/core/examples/generated/README.md">README&lt;/a>.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="tracks">Tracks&lt;/h3>
&lt;/font>
&lt;h4 id="track-sections">Track sections&lt;/h4>
&lt;p>The first objects we need to define are &lt;code>TrackSections&lt;/code>. Most other objects are positioned relative to track sections.&lt;/p>
&lt;p>A track section is a section of rail (switches not included). One can chose to divide the tracks of their infrastructure in as many track sections as they like. Here we chose to use the longest track sections possible, which means that between two switches there is always a single track section.&lt;/p>
&lt;p>Track sections is what simulated trains roll onto. They are the abstract equivalent to physical rail sections. Track sections are bidirectional.&lt;/p>
&lt;p>In this example, we define two tracks for the line between the West and North-East stations. We also have overpassing tracks at the North and Mid-West stations for added realism. Finally, we have three separate tracks in the West station, since it&amp;rsquo;s a major hub in our imaginary infrastructure.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_rails.drawio.en.svg" alt="Track sections diagram">&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Important&lt;/h4>
&lt;p>&lt;code>TrackSections&lt;/code> are represented as arrows in this diagram to stress the fact that they have a &lt;strong>start&lt;/strong> and an &lt;strong>end&lt;/strong>. It matters as objects positioned on track sections are located using their distance from the &lt;strong>start&lt;/strong> of their track section.&lt;/p>
&lt;p>Therefore, to locate an object at the beginning of its track section, set its offset to 0. To move it to the end of its track section, set its offset to the &lt;code>length&lt;/code> of the track section.&lt;/p>
&lt;/div>
&lt;p>These attributes are required for the track section to be complete:&lt;/p>
&lt;ul>
&lt;li>&lt;code>length&lt;/code>: the length of the track section in meters.&lt;/li>
&lt;li>&lt;code>geo&lt;/code>: the coordinates in real life (geo is for geographic), in the &lt;a href="https://en.wikipedia.org/wiki/GeoJSON">GeoJSON&lt;/a> format.&lt;/li>
&lt;li>&lt;code>sch&lt;/code>: the coordinates in the schematic view (sch for schematic), also in &lt;a href="https://en.wikipedia.org/wiki/GeoJSON">GeoJSON&lt;/a> format.&lt;/li>
&lt;li>cosmetic attributes: &lt;code>line_name&lt;/code>, &lt;code>track_name&lt;/code>, &lt;code>track_number&lt;/code> which are used to indicate the name and labels that were given to the tracks / lines in real life.&lt;/li>
&lt;/ul>
&lt;p>For all track sections in our infrastructure, the &lt;code>geo&lt;/code> and &lt;code>sch&lt;/code> attributes are identical, and very much resemble the given diagram.&lt;/p>
&lt;p>For most track sections, their &lt;code>length&lt;/code> is proportional to what can be seen in the diagram. To preserve readability, exceptions were made for &lt;em>TA6&lt;/em>, &lt;em>TA7&lt;/em>, &lt;em>TD0&lt;/em> and &lt;em>TD1&lt;/em> (which are 10km and 25km).&lt;/p>
&lt;h4 id="track-section-links">Track Section Links&lt;/h4>
&lt;p>At the moment we only created track sections, which are not connected to each other (geospacial data is not used to deduce which tracks connect).&lt;/p>
&lt;p>&lt;code>TrackSectionLinks&lt;/code> are used to connect two track sections together, just like a weld joint would in real life. In an OSRD simulation, a train can go from one track section to another only if they are connected by a &lt;code>TrackSectionLink&lt;/code> (or by a &lt;code>Switch&lt;/code>).&lt;/p>
&lt;p>To connect more than two &lt;code>TrackSections&lt;/code> together, use the &lt;a href="#switches">&lt;code>Switches&lt;/code>&lt;/a>.&lt;/p>
&lt;p>In our infrastructure, since we chose to have our track sections as long as possible, we do not actually need to use &lt;code>TrackSectionLinks&lt;/code>.
&lt;code>TrackSectionLinks&lt;/code> are always optional: two track sections connected by a link behave just like a single track section.&lt;/p>
&lt;h4 id="switches">Switches&lt;/h4>
&lt;p>A &lt;code>Switch&lt;/code> represents just what you would expect: railway switches.&lt;/p>
&lt;p>Switches can be thought of as a collections of track section links, partitioned into groups. Each group represents for a switch state. Switching group can take time, and at most one link can be ready to use at a time.&lt;/p>
&lt;p>In the real world, switches are not unique, but rather instances of existing models.
Thus, links and groups are not part of the switch itself, but in a &lt;code>SwitchType&lt;/code> object, which is shared by switches of the same model.&lt;/p>
&lt;h5 id="switch-types">Switch Types&lt;/h5>
&lt;p>&lt;code>SwitchTypes&lt;/code> have two mandatory attributes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ports&lt;/code>: A list of port names. A port is an endpoint which can be connected to a track section.&lt;/li>
&lt;li>&lt;code>groups&lt;/code>: A mapping from group names to lists of links between two ports.&lt;/li>
&lt;/ul>
&lt;p>At any time, all switches have an active group, and may have an active link, which always belongs to the active group. If there is an active link, it is active in a given direction. During a simulation, changing active link inside a group is instantaneous, but changing active link across groups takes configurable time.
This is because a switch is a physical object, and changing active link can involve moving parts of it. &lt;code>Groups&lt;/code> are designed to represent the different positions that a switch can have. Each &lt;code>group&lt;/code> contains the links that can be used in the associated switch position.&lt;/p>
&lt;p>The duration needed to change group is stored inside the &lt;code>Switch&lt;/code>, since it can vary depending on the physical implementation of the switch.&lt;/p>
&lt;p>Our examples currently use three switch types. Switch types are just like other objects, and can easily be added as needed.&lt;/p>
&lt;p>&lt;strong>1) The Point Switch&lt;/strong>&lt;/p>
&lt;p>The ubiquitous Y switch, which can be thought of as either two tracks merging, or one track splitting.&lt;/p>
&lt;p>This switch type has three ports: &lt;em>base&lt;/em>, &lt;em>left&lt;/em> and &lt;em>right&lt;/em>.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/point_switch.en.svg" alt="Point switch diagram">&lt;/p>
&lt;p>There are two groups, each with one connection in their list: &lt;code>LEFT&lt;/code>, which connects &lt;em>base&lt;/em> to &lt;em>left&lt;/em>, and &lt;code>RIGHT&lt;/code> which connects &lt;em>base&lt;/em> to &lt;em>right&lt;/em>.&lt;/p>
&lt;p>Thus, at any given moment, a train can go from &lt;em>base&lt;/em> to &lt;em>left&lt;/em> or from &lt;em>base&lt;/em> to &lt;em>right&lt;/em> but never to both at the same time. A train cannot go from &lt;em>left&lt;/em> to &lt;em>right&lt;/em>.&lt;/p>
&lt;p>A Point Switch only has two positions:&lt;/p>
&lt;p>&lt;img src="svg_diagrams/point_switch_positions.en.svg" alt="Point switch positions diagram">&lt;/p>
&lt;p>&lt;strong>2) The Cross Switch&lt;/strong>&lt;/p>
&lt;p>This is simply two tracks crossing each other.&lt;/p>
&lt;p>This type has four ports: &lt;em>north&lt;/em>, &lt;em>south&lt;/em>, &lt;em>east&lt;/em> and &lt;em>west&lt;/em>.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/cross_switch.en.svg" alt="Cross switch diagram">&lt;/p>
&lt;p>It has only one group containing two connections: &lt;em>north&lt;/em> to &lt;em>south&lt;/em> and &lt;em>west&lt;/em> to &lt;em>east&lt;/em>. Indeed this kind of switch is &lt;em>passive&lt;/em>: it has no moving parts. Despite having a single group, it is still used by the simulation to enforce route reservations.&lt;/p>
&lt;p>Here are the two different connections that this switch type has:&lt;/p>
&lt;p>&lt;img src="svg_diagrams/cross_switch_positions.en.svg" alt="Cross switch positions diagram">&lt;/p>
&lt;p>&lt;strong>3) The Double cross switch&lt;/strong>&lt;/p>
&lt;p>This one is more like two point switches back to back. It has four ports: &lt;em>south1&lt;/em>, &lt;em>south2&lt;/em>, &lt;em>north1&lt;/em> and &lt;em>north2&lt;/em>.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/double_cross_switch.en.svg" alt="Double cross switch diagram">&lt;/p>
&lt;p>However, it has four groups, each with one connection. The four groups are represented in the following diagram:&lt;/p>
&lt;p>&lt;img src="svg_diagrams/double_cross_switch_positions.en.svg" alt="Double cross switch positions diagram">&lt;/p>
&lt;h5 id="back-to-switches">Back to switches&lt;/h5>
&lt;p>A &lt;code>Switch&lt;/code> has three attributes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>switch_type&lt;/code>: the &lt;a href="#switch-types">&lt;code>SwitchType&lt;/code>&lt;/a> identifier for this switch.&lt;/li>
&lt;li>&lt;code>ports&lt;/code>: a mapping from port names to track sections extremities.&lt;/li>
&lt;li>&lt;code>group_change_delay&lt;/code>: the time it takes to change which group of the switch is activated.&lt;/li>
&lt;/ul>
&lt;p>The port names must match the ports of the switch type chosen. The track section endpoints can be start or end, be careful to chose the appropriate ones.&lt;/p>
&lt;p>Most of our example&amp;rsquo;s switches are regular point switches. The path from North station to South station has two cross switches, and there is a double cross switch right before the main line splits into the North-East and South-East lines.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_rails_n_points.drawio.en.svg" alt="Track sections and points diagram">&lt;/p>
&lt;h4 id="curves-and-slopes">Curves and slopes&lt;/h4>
&lt;p>&lt;code>Curves&lt;/code> and &lt;code>Slopes&lt;/code> are instrumental to realistic simulations. These objects are defined as a range between a &lt;code>begin&lt;/code> and &lt;code>end&lt;/code> offsets of one track section. If a curve / slope spans more than one track section, it has to be added to all of them.&lt;/p>
&lt;p>The slope / curve values are constant on their entire range. For varying curves / slopes, one needs to create several objects.&lt;/p>
&lt;p>Slope values are measured in &lt;em>meters per kilometers&lt;/em>, and the curve values are measured in &lt;em>meters&lt;/em> (the radius of the curve).&lt;/p>
&lt;div class="alert alert-primary" role="alert">
Mind that the &lt;code>begin&lt;/code> value should always be smaller than the &lt;code>end&lt;/code> value. That is why the curve / slope values can be negative: an uphill slope of 1 going from offset 10 to 0 is the same as a downhill slope of -1 going from offsets 0 to 10.
&lt;/div>
&lt;p>In the &lt;a href="https://github.com/DGEXSolutions/osrd/blob/dev/core/examples/generated/scripts/small_infra.py">small_infra.py&lt;/a> file, we have slopes on the track sections &lt;em>TA6&lt;/em>, &lt;em>TA7&lt;/em>, &lt;em>TD0&lt;/em> and &lt;em>TD1&lt;/em>.&lt;/p>
&lt;p>There are curves as well, on the track sections &lt;em>TE0&lt;/em>, &lt;em>TE1&lt;/em>, &lt;em>TE3&lt;/em> and &lt;em>TF1&lt;/em>.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="interlocking">Interlocking&lt;/h3>
&lt;/font>
&lt;p>All objects so far contributed to track topology (shape). Topology would be enough for trains to navigate the network, but not enough to do so safely. to ensure safety, two systems collaborate:&lt;/p>
&lt;ul>
&lt;li>Interlocking ensures trains are allowed to move forward&lt;/li>
&lt;li>Signaling is the mean by which interlocking communicates with the train&lt;/li>
&lt;/ul>
&lt;h4 id="detectors">Detectors&lt;/h4>
&lt;p>These objects are used to create TVD sections (Track Vacancy Detection section): the track area in between detectors is a TVD section. When a train runs into a detector, the section it is entering becomes occupied. The only function of TVD sections is to locate trains.&lt;/p>
&lt;p>In real life, detectors can be &lt;a href="https://en.wikipedia.org/wiki/Axle_counter">axle counters&lt;/a> or &lt;a href="https://en.wikipedia.org/wiki/Track_circuit">track circuits&lt;/a> for example.&lt;/p>
&lt;p>For this mean of location to be efficient, detectors need to be placed regularly along your tracks, not too many because of cost, but not too few, because then TVD sections would be very large and trains would need to be very far apart to be told apart, which reduces capacity.&lt;/p>
&lt;p>There often are detectors close to all sides of switches. This way, interlocking is made aware pretty much immediately when a switch is cleared, which is then free to be used again.&lt;/p>
&lt;div class="alert alert-info" role="alert">
Let&amp;rsquo;s take a cross switch as an example: if train A is crossing it &lt;em>north&lt;/em> to &lt;em>south&lt;/em> and train B is coming to cross &lt;em>west&lt;/em> to &lt;em>east&lt;/em>, then as soon as train A&amp;rsquo;s last car has passed the crossing, B should be able to go, since A is now on a completely unrelated track section.
&lt;/div>
&lt;p>In &lt;em>OSRD&lt;/em>, detectors are point objects, so all the attributes it needs are its &lt;code>id&lt;/code>, and track location (&lt;code>track&lt;/code> and &lt;code>offset&lt;/code>).&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_detectors.drawio.en.svg" alt="Infra diagram with all detectors">&lt;/p>
&lt;div class="alert alert-info" role="alert">
The clumped up squares represent many detectors at once. Indeed, because some track sections are not represented with their full length, we could not represent all the detectors on the corresponding track section.
&lt;/div>
&lt;p>Some notes:&lt;/p>
&lt;ul>
&lt;li>Between some points, we added only one detector (and not two), because they were really close together, and it would have made no sense to create a tiny TVDS between the two. This situation happened on track sections (&lt;em>TA3&lt;/em>, &lt;em>TA4&lt;/em>, &lt;em>TA5&lt;/em>, &lt;em>TF0&lt;/em> and &lt;em>TG3&lt;/em>).&lt;/li>
&lt;li>In our infrastructure, there is relatively few track sections which are long enough to require more detectors than just those related to switches. Namely, &lt;em>TA6&lt;/em>, &lt;em>TA7&lt;/em>, &lt;em>TDO&lt;/em>, &lt;em>TD1&lt;/em>, &lt;em>TF1&lt;/em>, &lt;em>TG1&lt;/em> and &lt;em>TH1&lt;/em>. For example &lt;em>TD0&lt;/em>, which measures 25km, has in fact 17 detectors in total.&lt;/li>
&lt;/ul>
&lt;h4 id="buffer-stops">Buffer stops&lt;/h4>
&lt;p>&lt;code>BufferStops&lt;/code> are obstacles designed to prevent trains from sliding off dead ends.&lt;/p>
&lt;p>In our infrastructure, there is a buffer stop on each track section which has a loose end. There are therefore 8 buffer stops in total.&lt;/p>
&lt;p>Together with detectors, they set the boundaries of &lt;a href="https://ressources.data.sncf.com/explore/dataset/lexique-des-acronymes-sncf/table/?sort=abreviation&amp;amp;q=TVD">TVD&lt;/a> sections (see &lt;a href="#detectors">Detectors&lt;/a>)&lt;/p>
&lt;h4 id="routes">Routes&lt;/h4>
&lt;p>A &lt;code>Route&lt;/code> is an itinerary in the infrastructure. A train path is a sequence of routes. Routes are used to reserve section of path with the interlocking. See the &lt;a href="https://osrd.fr/fr/developers/internals/simulation-model/">dedicated documentation&lt;/a>.&lt;/p>
&lt;p>It is represented with the following attributes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>entry_point&lt;/code> and &lt;code>exit_point&lt;/code>: references detectors or buffer stops.&lt;/li>
&lt;li>&lt;code>path&lt;/code>: The list of track section ranges a train can pass on to go from entry to exit. There can be two Routes with the same entry and exit points and two different paths.&lt;/li>
&lt;li>&lt;code>release_detectors&lt;/code>: When a train clears a release detector, resources reserved from the beginning of the route until this detector are released.&lt;/li>
&lt;/ul>
&lt;font color=#aa026d>
&lt;h3 id="signaling">Signaling&lt;/h3>
&lt;/font>
&lt;p>Thanks to interlocking, trains are located and allowed to move. It&amp;rsquo;s a good start, but meaningless until trains are made aware of it. This is where &lt;code>Signal&lt;/code>s come into play: signals react to interlocking, and can be seen by trains.&lt;/p>
&lt;p>How trains react to signals depends on the aspect, kind of signal, and signaling system.&lt;/p>
&lt;p>Here are the most important attributes for signals:&lt;/p>
&lt;ul>
&lt;li>&lt;code>linked_detector&lt;/code>: The linked &lt;a href="#detectors">detector&lt;/a>.&lt;/li>
&lt;li>&lt;code>type_code&lt;/code>: The type of signal.&lt;/li>
&lt;li>&lt;code>direction&lt;/code>: The direction it protects, which can simply be interpreted as the way in which it can be seen by an incoming train (since there are lights only on one side&amp;hellip;). Direction is relative to track section orientation.&lt;/li>
&lt;li>Cosmetic attributes like &lt;code>angle_geo&lt;/code> or &lt;code>side&lt;/code> which control the way in which the signals are displayed in the front-end.&lt;/li>
&lt;/ul>
&lt;p>Here is a visualization of how one can represent a signal, and which direction it protects.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/signal_dir.en.svg" alt="Signal direction example">&lt;/p>
&lt;br/>
&lt;p>The way the signals are arranged is highly dependent on both signaling system and infrastructure manager.&lt;/p>
&lt;p>Here are the basic rules used for this example infrastructure:&lt;/p>
&lt;ul>
&lt;li>We add two spacing signals (one per direction) for each detector that is cutting a long TVD section into smaller ones.&lt;/li>
&lt;li>Switch entries where a train might have to stop are protected by a signal (which is located outside of the switch TVD section). It must be visible from the direction used to approach the switch. When there are multiple switches in a row, only the first one usually needs protection, as interlocking is usually designed as not to encourage trains stopping in the middle of intersections.&lt;/li>
&lt;/ul>
&lt;p>Note that detectors linked to at least one signal are not represented, as there are not signals without associated detectors in this example.
To get the &lt;code>id&lt;/code> of a detector linked to a signal, take the signal&amp;rsquo;s &lt;code>id&lt;/code> and replace &lt;em>S&lt;/em> by &lt;em>D&lt;/em> (e.g. SA0 -&amp;gt; DA0).&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_signals.drawio.en.svg" alt="Infra diagram with all signals">&lt;/p>
&lt;div class="alert alert-info" role="alert">
On &lt;em>TA6&lt;/em>, &lt;em>TA7&lt;/em>, &lt;em>TD0&lt;/em> and &lt;em>TD1&lt;/em> we could not represent all signals because these track sections are very long and have many detectors, hence many signals.
&lt;/div>
&lt;font color=#aa026d>
&lt;h2 id="miscellaneous">Miscellaneous&lt;/h2>
&lt;/font>
&lt;h4 id="operational-points">Operational points&lt;/h4>
&lt;p>&lt;code>OperationalPoints&lt;/code> are collections of points (&lt;code>OperationalPointParts&lt;/code>) of interest.&lt;/p>
&lt;p>For example, it may be convenient to store the location of platforms as parts and group them by station in operational points.&lt;/p>
&lt;p>In the example infrastructure, we only used operational points to represent stations. Operational point parts are displayed as purple diamonds. Keep in mind a single operational point may contain multiple parts.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_op_points.drawio.en.svg" alt="Operational points examples">&lt;/p>
&lt;h4 id="loading-gauge-limits">Loading Gauge Limits&lt;/h4>
&lt;p>These objects are akin to &lt;code>Slopes&lt;/code> and &lt;code>Curves&lt;/code>: it covers a range of track section, with a &lt;code>begin&lt;/code> and an &lt;code>end&lt;/code> offset. It represents a restriction on the trains that can travel on the given range, by weight or by train type (freight or passenger).&lt;/p>
&lt;p>We did not put any in our examples.&lt;/p>
&lt;h4 id="speed-sections">Speed Sections&lt;/h4>
&lt;p>The &lt;code>SpeedSections&lt;/code> represent speed limits (in meters per second) that are applied on some parts of the tracks. One &lt;code>SpeedSection&lt;/code> can span on several track sections, and do not necessarily cover the whole track sections. Speed sections can overlap.&lt;/p>
&lt;p>In our example infrastructure, we have a speed section covering the whole infrastructure, limiting the speed to 300 km/h. On a smaller part of the infrastructure, we applied more restrictive speed sections.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/speed_sections.en.svg" alt="Speed section examples">&lt;/p></description></item><item><title>Docs: Report issues</title><link>https://osrd.fr/en/docs/guides/contribute/bug-reports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/bug-reports/</guid><description>
&lt;p>&lt;strong>Please report anything you deem significant!&lt;/strong>&lt;/p>
&lt;p>Our bug tracking platform is github, so have to register to report bugs.&lt;/p>
&lt;p>Follow &lt;a href="https://github.com/DGEXSolutions/osrd/issues/new/choose">this link&lt;/a> and pick whatever template fits the best.&lt;/p></description></item><item><title>Docs: Envelopes system</title><link>https://osrd.fr/en/docs/explanation/running_time_calculation/envelopes_system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/running_time_calculation/envelopes_system/</guid><description>
&lt;p>The envelope system is an interface created specifically for the OSRD gait calculation. It allows you to manipulate different space/velocity curves, to slice them, to end them, to interpolate specific points, and to address many other needs necessary for the gait calculation.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="a-specific-interface-in-the-osrd-core-service">A specific interface in the OSRD Core service&lt;/h3>
&lt;/font>
&lt;p>The envelope system is part of the core service of OSRD (see &lt;a href="../architecture/_index.md">software architecture&lt;/a>).&lt;/p>
&lt;p>Its main components are :&lt;/p>
&lt;p>&lt;strong>1 - EnvelopePart:&lt;/strong> space/speed curve, defined as a sequence of points and having metadata indicating for example if it is an acceleration curve, a braking curve, a speed hold curve, etc.&lt;/p>
&lt;p>&lt;strong>2 - Envelope:&lt;/strong> a list of end-to-end EnvelopeParts on which it is possible to perform certain operations:&lt;/p>
&lt;ul>
&lt;li>check for continuity in space (mandatory) and speed (optional)&lt;/li>
&lt;li>look for the minimum and/or maximum speed of the envelope&lt;/li>
&lt;li>cut a part of the envelope between two points in space&lt;/li>
&lt;li>perform a velocity interpolation at a certain position&lt;/li>
&lt;li>calculate the elapsed time between two positions in the envelope&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../envelopes_scheme.png" alt="envelope_scheme">&lt;/p>
&lt;p>&lt;strong>3 - Overlays :&lt;/strong> system for adding more constrained (i.e. lower speed) EnvelopeParts to an existing envelope.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="given-envelopes-vs-calculated-envelopes">Given envelopes vs. calculated envelopes&lt;/h3>
&lt;/font>
&lt;p>During the simulation, the train is supposed to follow certain speed instructions. These are modelled in OSRD by envelopes in the form of space/speed curves. Two types can be distinguished:&lt;/p>
&lt;ul>
&lt;li>Envelopes from &lt;strong>infrastructure and rolling stock data&lt;/strong>, such as maximum line speed and maximum train speed. Being input data for our calculation, they do not correspond to curves with a physical meaning, as they are not derived from the results of a real integration of the physical equations of motion.&lt;/li>
&lt;li>The envelopes result from &lt;strong>real integration&lt;/strong> of the physical equations of motion. They correspond to a curve that is physically tenable by the train and also contain time information.&lt;/li>
&lt;/ul>
&lt;p>A simple example to illustrate this difference: if we simulate a TER journey on a mountain line, one of the input data will be a maximum speed envelope of 160km/h, corresponding to the maximum speed of our TER. However, this envelope does not correspond to a physical reality, as it is possible that on certain sections the gradient is too steep for the train to be able to maintain this maximum speed of 160km/h. The calculated envelope will therefore show in this example a speed drop in the steepest areas, where the envelope given was perfectly flat.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="simulation-of-several-trains">Simulation of several trains&lt;/h3>
&lt;/font>
&lt;p>In the case of the simulation of many trains, the signalling system must ensure &lt;strong>safety&lt;/strong>. The effect of signalling on the running calculation of a train is reproduced by superimposing dynamic envelopes on the static envelope. A new dynamic envelope is introduced for example when a signal closes. The train follows the static economic envelope superimposed on the dynamic envelopes, if any. In this simulation mode, a time check is performed against a theoretical time from the time information of the static economic envelope. If the train is late with respect to the scheduled time, it stops following the economic envelope and tries to go faster. Its space/speed curve will therefore be limited by the maximum effort envelope.&lt;/p></description></item><item><title>About: Infrastructure management</title><link>https://osrd.fr/en/about/use-case/infrastructure-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/about/use-case/infrastructure-management/</guid><description>
&lt;font color=#aa026d>
&lt;h3 id="presentation">Presentation&lt;/h3>
&lt;/font>
&lt;p>Several applications used within the SNCF group and outside need a &lt;strong>mapping representation of the railway network&lt;/strong>. The OSRD base map uses geographic data from &lt;strong>OpenStreetMap (OSM)&lt;/strong>, a &amp;ldquo;Wikipedia of maps&amp;rdquo; that allows collaborative consultation and editing of geographic data. This base map is regularly updated to reflect the evolution of non-rail infrastructure.&lt;/p>
&lt;p>&lt;img src="../osrd_management.png" alt="OSRD management">&lt;/p>
&lt;p>&amp;ldquo;OSRD Infrastructure Management**&amp;rdquo; proposes a mapping service accessible to all and shared, based on the same model: everyone will be able to contribute and put in quality the railway data.
We provide on the one hand a &lt;strong>complete editor of the rail network infrastructure and the objects that compose it&lt;/strong>, and on the other hand, &lt;strong>the provision of data layers for their exploitation and representation in the standards of online mapping&lt;/strong>. Finally, we are studying the possibility of **being able to automate the updating of OpenStreetMap&amp;rsquo;s railway data** with the data thus made available.&lt;/p></description></item><item><title>Docs: Pipeline</title><link>https://osrd.fr/en/docs/explanation/running_time_calculation/pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/running_time_calculation/pipeline/</guid><description>
&lt;p>The walk calculation in OSRD is a 4-step process, each using &lt;a href="../envelopes_system">the envelopes system&lt;/a>:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#calculation-of-the-most-restricted-speed-profile-mrsp">Construction of the most restrictive speed profile&lt;/a>&lt;/li>
&lt;li>&lt;a href="#calculation-of-the-max-speed-profile">Addition of the different braking curves&lt;/a>&lt;/li>
&lt;li>&lt;a href="#calculation-of-the-max-effort-profile">Adding the different acceleration curves and checking the constant speed curves&lt;/a>&lt;/li>
&lt;li>&lt;a href="#application-of-allowances">Application of allowance(s)&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>&amp;nbsp;&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="calculation-of-the-most-restricted-speed-profile-mrsp">Calculation of the Most Restricted Speed Profile (MRSP)&lt;/h3>
&lt;/font>
&lt;p>A first envelope is calculated at the beginning of the simulation by grouping all static velocity limits:&lt;/p>
&lt;ul>
&lt;li>maximum line speed&lt;/li>
&lt;li>maximum speed of rolling stock&lt;/li>
&lt;li>temporary speed limits (e.g. in case of works on a line)&lt;/li>
&lt;li>speed limits by train category&lt;/li>
&lt;li>speed limits according to train load&lt;/li>
&lt;li>speed limits corresponding to signposts&lt;/li>
&lt;/ul>
&lt;p>The length of the train is also taken into account to ensure that the train does not accelerate until its tail leaves the slowest speed zone. An offset is then applied to the red dashed curve. The resulting envelope (black curve) is called the &lt;strong>Most Restricted Speed Profile (MRSP)&lt;/strong>. It is on this envelope that the following steps will be calculated.&lt;/p>
&lt;p>&lt;img src="../mrsp.png" alt="Most Restricted Speed Profile">&lt;/p>
&lt;blockquote>
&lt;p>The red dotted line represents the maximum permitted speed depending on the position.
The black line represents the MRSP where the train length has been taken into account.&lt;/p>
&lt;/blockquote>
&lt;p>It should be noted that the different envelopeParts composing the MRSP are input data, so they do not correspond to curves with a physical reality.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="calculation-of-the-max-speed-profile">Calculation of the Max Speed Profile&lt;/h3>
&lt;/font>
&lt;p>Starting from the MRSP, all braking curves are calculated using the overlay system (see &lt;a href="../envelopes_system/#a-specific-interface-in-the-osrd-core-service">here&lt;/a> for more details on overlays), i.e. by creating envelopeParts which will be more restrictive than the MRSP. The resulting curve is called &lt;strong>Max Speed Profile&lt;/strong>. This is the maximum speed envelope of the train, taking into account its braking capabilities.&lt;/p>
&lt;p>Since braking curves have an imposed end point and the braking equation has no analytical solution, it is impossible to predict their starting point. The braking curves are therefore calculated backwards from their target point, i.e. the point in space where a certain speed limit is imposed (finite target speed) or the stopping point (zero target speed).&lt;/p>
&lt;p>&lt;img src="../msp.png" alt="Max Speed Profile">&lt;/p>
&lt;p>For historical reasons in hourly production, braking curves are calculated at SNCF with a fixed deceleration, the so-called hourly deceleration (typically ~0.5m/s²) without taking into account the other forces. This method has therefore also been implemented in OSRD, allowing the calculation of braking in two different ways: with this hourly rate or with a braking force that is simply added to the other forces.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="calculation-of-the-max-effort-profile">Calculation of the Max Effort Profile&lt;/h3>
&lt;/font>
&lt;p>For each point corresponding to an increase in speed in the MRSP or at the end of a stop braking curve, an acceleration curve is calculated. The acceleration curves are calculated taking into account all active forces (traction force, driving resistance, weight) and therefore have a physical meaning.&lt;/p>
&lt;p>For envelopeParts whose physical meaning has not yet been verified (which at this stage are the constant speed running phases, always coming from the MRSP), a new integration of the equations of motion is performed. This last calculation is necessary to take into account possible speed stalls in case the train is physically unable to hold its speed, typically in the presence of steep ramps (see &lt;a href="../envelopes_system/#given-envelopes-vs.-calculated-envelopes">this example&lt;/a>).&lt;/p>
&lt;p>The envelope that results from the addition of the acceleration curves and the verification of the speed plates is called the &lt;strong>Max Effort Profile&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="../mep.png" alt="Max Effort Profile">&lt;/p>
&lt;p>At this stage, the resulting envelope is continuous and has a physical meaning from start to finish. The train accelerates to the maximum, runs as fast as possible according to the different speed limits and driving capabilities, and brakes to the maximum. The resulting travel calculation is called the &lt;strong>basic running time&lt;/strong>. It corresponds to the fastest possible route for the given rolling stock on the given route.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="application-of-allowances">Application of allowance(s)&lt;/h3>
&lt;/font>
&lt;p>After the calculation of the basic run (corresponding to the Max Effort Profile in OSRD), it is possible to apply allowances. Allowances are additions of extra time to the train&amp;rsquo;s journey. They are used to allow the train to catch up if necessary or for other operational purposes (more details on allowances &lt;a href="../allowances">here&lt;/a>).&lt;/p>
&lt;p>A new &lt;strong>Allowances&lt;/strong> envelope is therefore calculated using overlays to distribute the allowance requested by the user over the maximum effort envelope calculated previously.&lt;/p>
&lt;p>&lt;img src="../allowances.png" alt="Allowances">&lt;/p>
&lt;p>In the OSRD running calculation it is possible to distribute the allowances in a linear way, by lowering all speeds by a certain factor, or in an economic way, i.e. by minimising the energy consumption during the train run.&lt;/p></description></item><item><title>Docs: Contribute code</title><link>https://osrd.fr/en/docs/guides/contribute/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/code/</guid><description>
&lt;h2 id="set-things-up">Set things up&lt;/h2>
&lt;div class="alert alert-info" role="alert">
Most OSRD developers use Linux. Windows and MacOS should work too, but you may run into some issues.
&lt;/div>
&lt;h3 id="getting-the-source-code">Getting the source code&lt;/h3>
&lt;ul>
&lt;li>Install &lt;a href="https://git-scm.com/">&lt;code>git&lt;/code>&lt;/a>.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Open a terminal&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> in the folder where the source code of OSRD will be located&lt;/li>
&lt;li>Run &lt;code>git clone git@github.com:DGEXSolutions/osrd&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="launch-the-application-with-docker-compose">Launch the application with docker-compose&lt;/h3>
&lt;p>For a long time, making changes to a component of a multi-service application involved compiling, configuring and running all services manually.&lt;/p>
&lt;p>Nowadays, it can be done using &lt;code>docker-compose&lt;/code>. You can even start only a subset of the services.&lt;/p>
&lt;ul>
&lt;li>Install &lt;code>docker&lt;/code> and &lt;code>docker-compose&lt;/code>. &lt;sup id="fnref1:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Run &lt;code>docker-compose up --build&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="share-your-changes">Share your changes&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;p>The source code of OSRD is available under &lt;a href="https://choosealicense.com/licenses/lgpl-3.0/">the LGPLv3 license&lt;/a>.
By contributing to the codebase, you consent to the distribution of your changes under the project&amp;rsquo;s license.&lt;/p>
&lt;p>LGPLv3 forbids modifying source code without sharing the changes under the same license: use other people&amp;rsquo;s work, and share yours!&lt;/p>
&lt;p>This constraint does not propagate through APIs: You can use OSRD as a library, framework or API server to interface with proprietary software. Please suggest changes if you need new interfaces.&lt;/p>
&lt;/div>
&lt;p>This chapter is about the process of integrating changes into the common code base. &lt;strong>If you need help at any stage, open an issue or message us.&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>If you are not used to Git, &lt;a href="https://learngitbranching.js.org/">follow this tutorial&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create a branch&lt;/strong>&lt;br>
If you intend to contribute regularly, you can request access to the &lt;a href="https://github.com/DGEXSolutions/osrd">main repository&lt;/a>. Otherwise, &lt;a href="https://github.com/DGEXSolutions/osrd/fork">create a fork&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Add changes to your branch&lt;/strong>&lt;br>
Before you start working, try to split your work into macroscopic steps. At the end of each stop, save your changes into a commit. Try to follow &lt;a href="../conventions/">style conventions&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Open a pull request&lt;/strong>&lt;br>
Once your changes are ready, you have to request integration with the &lt;code>dev&lt;/code> branch. It can be done through &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request">the web interface&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Take feedback into account&lt;/strong>&lt;br>
Once your pull request is open, &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews">other contributors can review your changes&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>Any user can review your changes&lt;/li>
&lt;li>Your code has to be approved by a contributor &lt;a href="https://github.com/DGEXSolutions/osrd/blob/dev/.github/CODEOWNERS">familiar with the code&lt;/a>&lt;/li>
&lt;li>All users are expected to take critical comments into account&lt;/li>
&lt;li>Comments tend to be written in an open and direct manner. The intent is to efficiently collaborate towards a solution we all agree on.&lt;/li>
&lt;li>Once all discussions are resolved, a maintainer integrates the change.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>If you believe somebody forgot to review / merge your change, please speak out, multiple times if needs be.&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="git-commit-style">Git commit style&lt;/h2>
&lt;p>The overall format for git commits is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code>component: imperative description of the change
Detailed description of the change and what motivates it,
if it is not entirely obvious from the title.
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;strong>the commit message, just like the code, must be in english&lt;/strong>&lt;/li>
&lt;li>all lowercase&lt;/li>
&lt;li>there can be multiple components separated by &lt;code>:&lt;/code> in case of hierarchical relationships, with &lt;code>,&lt;/code> otherwise&lt;/li>
&lt;li>the body of the commit should probably contain a detailed description of the change&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Under Linux, use your distribution&amp;rsquo;s package manager, such as &lt;code>apt-get&lt;/code>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Under Windows, open &lt;code>Git Bash&lt;/code>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>About: Governance</title><link>https://osrd.fr/en/about/governance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/about/governance/</guid><description>
&lt;p>One of the ambitions of OSRD is to help with &lt;strong>timetabling on a European scale&lt;/strong>.&lt;/p>
&lt;p>To reach this goal, OSRD has to take local features into account by consulting and collaborating with railway companies and infrastructure managers.&lt;/p>
&lt;p>And for their trouble contributing to OSRD, these companies:&lt;/p>
&lt;ul>
&lt;li>profit from all the common development efforts&lt;/li>
&lt;li>can freely build on the common effort to achieve their own goals&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;li>participate in the roadmap and technical direction of the project to the extent of their contribution&lt;/li>
&lt;/ul>
&lt;h2 id="the-open-rail-foundation">The Open Rail Foundation&lt;/h2>
&lt;p>The &lt;a href="https://openrailfoundation.gitlab.io/">Open Rail Foundation&lt;/a> is a non-profit commited to organizing cooperative work around railway software tools.&lt;/p>
&lt;p>&lt;a href="https://openrailfoundation.gitlab.io/">&lt;img class="marginauto" src="openrail_foundation_vector.png" alt="OpenRail Foundation">&lt;/a>&lt;/p>
&lt;style>
.marginauto {
margin: 10px auto 20px;
display: block;
width:220px;
height:200px;
}
.marginauto:hover {
filter: brightness(80%);
transition: all 0.5s;
}
&lt;/style>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>As long as they don&amp;rsquo;t modify the common tools without sharing their improvements. See the details of the LGPLv3 license.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>About: Short term digital capacity management</title><link>https://osrd.fr/en/about/use-case/short-term-dcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/about/use-case/short-term-dcm/</guid><description>
&lt;font color=#aa026d>
&lt;h3 id="definition">Definition&lt;/h3>
&lt;/font>
&lt;p>In order to define the Short Term Digital Capacity Management (STDCM) path, we first need to define what a path is, as well as the actors involved. A &lt;strong>path&lt;/strong> is the reservation of space/time on the network. It is an &lt;strong>RC&lt;/strong> (railway company) that orders the path, and the &lt;strong>IM&lt;/strong> (infrastructure manager) that provides the route. When we talk about &amp;ldquo;normal&amp;rdquo; train paths, the reservation request is made several years in advance (A-3), and the IM produces a document in which we can find all the requests with their assigned capacity on the network. &lt;strong>Capacity&lt;/strong> is the total amount of track available on the rail network of a IM. It is divided between commercial capacity, intended for RCs, and work capacity, which, as its name indicates, is reserved for the various works planned on the tracks. As a preventive measure and in order to be able to manage certain contingencies (delays, technical or environmental problems), the rate of reserved train paths may not exceed 75% of the total capacity of the network.&lt;/p>
&lt;p>This is where the last minute groove comes in. If there are no problems, the IM is left with about 25% of its capacity unused. So if an RC needs a path urgently (between A-1 and up to a few minutes before the rolling stock is due to depart), it can apply for a STDCM.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="challenges-and-ambitions">Challenges and ambitions&lt;/h3>
&lt;/font>
&lt;p>The STDCMs are currently managed by the capacity counter between A-1 and D-1, and by the operational counter from D-1 to 5 pm. Several problems arise from this; the request is tedious and the response from the counters is asynchronous (taking several days to respond), the paths are traced by hand (risk of human error) and the billing can get lost in the operations, it is estimated that tens of millions of euros are lost due to unbilled STDCM. Some digital tools already know how to solve these problems, but they do not take into account conflict management on the network, or if they do, they do not know how to manage it at the station.&lt;/p>
&lt;p>It is in response to these challenges that the idea of offering digital management of last-minute train paths was born. The objective is to allow RCs to book train paths easily, by proposing a calculation of the STDCM within the theoretical forecast capacity, and by providing them with a quick response (about 3 minutes waiting time). Customers could also choose between several calculation modes. This tool is under development and should be available in the next few years.&lt;/p></description></item><item><title>Docs: Allowances</title><link>https://osrd.fr/en/docs/explanation/running_time_calculation/allowances/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/running_time_calculation/allowances/</guid><description>
&lt;font color=#aa026d>
&lt;h3 id="the-purpose-of-allowances">The purpose of allowances&lt;/h3>
&lt;/font>
&lt;p>As explained in the &lt;a href="../pipeline/#calculation-of-the-max-effort-profile">calcul du Max Effort Profile&lt;/a>, the &lt;strong>basic running time&lt;/strong> represents the most stretched run normally achievable, i.e. the fastest possible run of the given equipment on the given route. The train accelerates to the maximum, travels as fast as possible according to the different speed limits and driving capabilities, and brakes to the maximum.&lt;/p>
&lt;p>This basic run has a major disadvantage: if a train leaves 10 minutes late, it will arrive at best 10 minutes late, because by definition it is impossible for it to run faster than the basic run. Therefore, trains are scheduled with one or more allowances added. The allowances are a relaxation of the train&amp;rsquo;s route, an addition of time to the scheduled timetable, which inevitably results in a lowering of running speeds.&lt;/p>
&lt;blockquote>
&lt;p>A train running in basic gear is unable to catch up!&lt;/p>
&lt;/blockquote>
&lt;font color=#aa026d>
&lt;h3 id="allowances-types">Allowances types&lt;/h3>
&lt;/font>
&lt;p>There are two types of allowances:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>The regularity allowance&lt;/strong>: this is the additional time added to the basic running time to take account of the inaccuracy of speed measurement, to compensate for the consequences of external incidents that disrupt the theoretical run of trains, and to maintain the regularity of the traffic. The regularity allowance applies to the whole route, although its value may change at certain intervals.&lt;/li>
&lt;li>&lt;strong>The construction allowance&lt;/strong>: this is the time added/removed on a specific interval, in addition to the regularity allowance, but this time for operational reasons (dodging another train, clearing a track more quickly, etc.)&lt;/li>
&lt;/ul>
&lt;p>A basic running time with an added allowance of regularity gives what is known as a &lt;strong>standard walk&lt;/strong>.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="allowance-distribution">Allowance distribution&lt;/h3>
&lt;/font>
&lt;p>Since the addition of allowance results in lower speeds along the route, there are a number of possible routes. Indeed, there are an infinite number of solutions that result in the same journey time.&lt;/p>
&lt;p>As a simple example, in order to reduce the running time of a train by 10% of its journey time, it is possible to extend any stop by the time equivalent to this 10%, just as it is possible to run at 1/1.1 = 90.9% of the train&amp;rsquo;s capacity over the entire route, or to run slower, but only at high speeds&amp;hellip;&lt;/p>
&lt;p>There are currently two algorithms for margin distribution in OSRD: linear and economic.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="linear-distribution">Linear distribution&lt;/h3>
&lt;/font>
&lt;p>Linear allowance distribution is simply lowering the speeds by the same factor over the area where the user applies the allowance. Here is an example of its application:&lt;/p>
&lt;p>&lt;img src="../python_plot_linear.png" alt="Python plot linear">&lt;/p>
&lt;p>The advantage of this distribution is that the allowance is spread evenly over the entire journey. A train that is late on 30% of its journey will have 70% of its allowance for the remaining 70% of its journey.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="economic-distribution">Economic distribution&lt;/h3>
&lt;/font>
&lt;p>The economic distribution of the allowance, presented in detail in &lt;a href="../MARECO.pdf">this document&lt;/a> (&lt;strong>MARECO&lt;/strong> is an algorithm designed by the SNCF research department), consists of distributing the allowance in the most energy-efficient way possible. It is based on two principles:&lt;/p>
&lt;ol>
&lt;li>a maximum speed, avoiding the most energy-intensive speeds&lt;/li>
&lt;li>run-on zones, located before braking and steep gradients, where the train runs with the engine off thanks to its inertia, allowing it to consume no energy during this period&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="../python_plot_eco_w_slopes.png" alt="Python plot eco with slopes">&lt;/p>
&lt;blockquote>
&lt;p>An example of economic walking. Above, the gradients/ramps encountered by the train. The areas of travel on the track are shown in blue.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Review code</title><link>https://osrd.fr/en/docs/guides/contribute/code-reviews/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/code-reviews/</guid><description>
&lt;figure>&lt;a href="https://www.morling.dev/blog/the-code-review-pyramid/">
&lt;img src="https://osrd.fr/en/docs/guides/contribute/code-reviews/images/code_review_pyramid.svg"/> &lt;/a>
&lt;/figure></description></item><item><title>About: Open Source</title><link>https://osrd.fr/en/about/opensource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/about/opensource/</guid><description>
&lt;p>Open source is a &lt;strong>software development practice&lt;/strong>, where the software&amp;rsquo;s source code&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> :&lt;/p>
&lt;ul>
&lt;li>usually developped by multiple actors, in an open and transparent way&lt;/li>
&lt;li>free and available for all&lt;/li>
&lt;li>can be modified or used for derivative work by anyone&lt;/li>
&lt;li>can be freely distributed&lt;/li>
&lt;/ul>
&lt;p>In practice, open source is both a &lt;strong>legal framework&lt;/strong> for collaborative work, and a &lt;strong>set of practices&lt;/strong>.&lt;/p>
&lt;h2 id="osrd-and-open-source">OSRD and Open Source&lt;/h2>
&lt;p>Applied to OSRD, Open Source has &lt;strong>multiple avantages&lt;/strong> :&lt;/p>
&lt;ul>
&lt;li>the algorigthms and know-how developped with the project are free for all&lt;/li>
&lt;li>development cost and results are shared between actors&lt;/li>
&lt;li>it makes interoperability between software systems easier by making helping make the landscape more homogeneous and standardized&lt;/li>
&lt;li>helps focus collaboration around common interests&lt;/li>
&lt;li>enables actors to tailor the software to their own interests&lt;/li>
&lt;li>enables researchers to contribute and benefit from the project&lt;/li>
&lt;li>it allows public actors to meet their transparency goals&lt;/li>
&lt;/ul>
&lt;p>Using open source to enable industrial collaboration is not a new idea:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Blender&lt;/strong> is a modelling, rendering and 3D animation software, which has recently become &lt;a href="https://fund.blender.org/">major point of industry collaboration&lt;/a> for this industry&lt;/li>
&lt;li>&lt;strong>Linux&lt;/strong>, a Windows alternative used by Google, Microsoft, Amazon, Apple, most websites, cloud platforms, mobile phones, routers, and more. All these companies rely on and contribute to Linux tremendously&lt;/li>
&lt;li>&lt;strong>Android&lt;/strong> is the common base software for most phones. Phone manufacturers regularly contribute to android&lt;/li>
&lt;li>&lt;strong>PostgreSQL&lt;/strong>, &lt;strong>MySQL&lt;/strong>, &lt;strong>SQLite&lt;/strong> and other open source data bases collectively dominate the database market. Any actor with special needs can improve an existing open source tool rather than create a new one.&lt;/li>
&lt;li>Both &lt;strong>Firefox&lt;/strong> and &lt;strong>Chrome&lt;/strong> are Open Source&lt;/li>
&lt;li>&lt;strong>Wordpress&lt;/strong> is the CMS which runs 43% of all websites. A flock of companies contribute to Wordpress and make extensions&lt;/li>
&lt;li>&lt;strong>Odoo&lt;/strong> is a powerful modular ERP, which has a community not unlike Wordpress&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>All these projects share the common property of being essential to a number of companies, without being part of what these companies sell.&lt;/strong>&lt;/p>
&lt;p>It thus makes sense for these companies to collaborate with peers and competitors to build common tools, which makes exchanges easier and helps improve quality of service for all.&lt;/p>
&lt;h2 id="processes">Processes&lt;/h2>
&lt;div class="alert alert-info" role="alert">
These processes are not specific to open source: many companies work in a similar way.
&lt;/div>
&lt;p>In practice, most open source software is developed using &lt;a href="https://github.com/DGEXSolutions/osrd">a forge&lt;/a>. Through this forge, developers and users can access the source code, report bugs, plan tasks, and integrate new changes to the code.
Anyone can suggest a change, report a bug or plan a task.&lt;/p>
&lt;p>All changes go through a &lt;strong>peer review&lt;/strong>, not unlike those used by the scientific community.
Reviewers are software developers most familiar with components affected by the change.&lt;/p>
&lt;p>Changes are integrated into the code base when everyone involved agrees to.
Maintainers are responsible for keeping the project working and consistent. Maintainers are choosen among developers by developers.
What motivates whether to integrate a change or not is technical viability: the goal of everyone involved is to &lt;strong>maintain high level of service and quality standard&lt;/strong>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Source code is a set of text documents which describes how a piece of software works. It&amp;rsquo;s the result of the work of software developers.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>About: Open Data</title><link>https://osrd.fr/en/about/opendata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/about/opendata/</guid><description>
&lt;p>Open Data is the practice of making data public accessible under a permissive license.
It is not the same as open source, which only applies to software.&lt;/p>
&lt;p>&lt;strong>Open data and open source have a symbiotic relationship : without open data, an open source railway software can only be used by industry insiders. Managing data access is hard, expensive, often not necessary, and reduces the availability of critical data.&lt;/strong>&lt;/p>
&lt;p>Alone, &lt;strong>open data&lt;/strong> already brings a number of key benefits:&lt;/p>
&lt;ul>
&lt;li>companies can use open data in their products, which also promotes railway services&lt;/li>
&lt;li>researchers can study the data immediately, and can find the data by themselves&lt;/li>
&lt;/ul>
&lt;p>Yet, &lt;strong>open data&lt;/strong> used by an &lt;strong>open source toolbox&lt;/strong> open up new prospects:&lt;/p>
&lt;ul>
&lt;li>companies and researchers can use the open source tools to analyse the data, which greatly reduces the barrier to entry by alleviating the need for custom or paid-for tools&lt;/li>
&lt;li>customers can use the toolbox to improve how they use railway services&lt;/li>
&lt;/ul>
&lt;p>If &lt;strong>multiple actors&lt;/strong> have open data exploitable by an open source tool, these datasets can be &lt;strong>combined&lt;/strong> and used to &lt;strong>provide and plan for common services&lt;/strong>.&lt;/p>
&lt;h2 id="osrd-and-open-data">OSRD and Open Data&lt;/h2>
&lt;ul>
&lt;li>having &lt;strong>rolling stock&lt;/strong> and &lt;strong>infrastructure&lt;/strong> open data enables anyone to &lt;strong>simulate trains&lt;/strong>, &lt;strong>study&lt;/strong> and &lt;strong>evaluate&lt;/strong> the railway network&lt;/li>
&lt;li>having &lt;strong>timetable&lt;/strong> open data enables anyone to &lt;strong>study&lt;/strong> rail network usage&lt;/li>
&lt;/ul></description></item><item><title>Docs: ETCS</title><link>https://osrd.fr/en/docs/railway-wiki/signalling/spacing/ertms/etcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/railway-wiki/signalling/spacing/ertms/etcs/</guid><description>
&lt;h2 id="context">Context&lt;/h2>
&lt;p>The onboard computer of ETCS-enabled trains has to compute a number of position / speed curves.
Here is how it works:&lt;/p>
&lt;ul>
&lt;li>below all the curves, the speed indicator is white&lt;/li>
&lt;li>above the indication curve, the speed indicator is yellow&lt;/li>
&lt;li>above the permitted curve, the speed indicator is orange&lt;/li>
&lt;li>above the warning curve, an alarm rings&lt;/li>
&lt;li>above the intervention curves, an emergency break intervention is triggered&lt;/li>
&lt;/ul>
&lt;h2 id="inputs">Inputs&lt;/h2>
&lt;p>In order to compute any of these curves, a number of things are needed:&lt;/p>
&lt;ul>
&lt;li>target data (the destination of the braking curve, which can be EOA and SvL or LOA and MRSP)&lt;/li>
&lt;li>train data&lt;/li>
&lt;li>infrastructure data&lt;/li>
&lt;li>infrastructure manager constants&lt;/li>
&lt;li>standardized constants&lt;/li>
&lt;/ul>
&lt;h3 id="train">Train&lt;/h3>
&lt;ul>
&lt;li>max speed&lt;/li>
&lt;li>length&lt;/li>
&lt;li>rotating mass&lt;/li>
&lt;li>&lt;code>T_traction_cutoff&lt;/code>: the time it take to cut off traction&lt;/li>
&lt;li>braking model, either lambda or gamma:
&lt;ul>
&lt;li>lambda (braking weight/mass)&lt;/li>
&lt;li>gamma (contant deceleration at a given speed)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>correction factors (k_dry and k_wet for gamma braking) for braking curves&lt;/li>
&lt;/ul>
&lt;h3 id="infrastructure">Infrastructure&lt;/h3>
&lt;ul>
&lt;li>corrected gradients (it incorporates curvature)&lt;/li>
&lt;li>odometry balises location&lt;/li>
&lt;/ul>
&lt;h2 id="processes">Processes&lt;/h2>
&lt;h3 id="braking-coefficients">Braking coefficients:&lt;/h3>
&lt;ul>
&lt;li>&lt;code>A_brake_emergency&lt;/code> is the expected emergency braking capability, without safety margins&lt;/li>
&lt;li>&lt;code>A_brake_safe&lt;/code> is the emergency braking coefficient, &lt;strong>with&lt;/strong> safety margins&lt;/li>
&lt;li>&lt;code>A_brake_service&lt;/code> is the expected service braking capability, without safety margins&lt;/li>
&lt;/ul>
&lt;h3 id="speed--distance-targets">Speed / distance targets&lt;/h3>
&lt;ul>
&lt;li>&lt;code>EOA&lt;/code> end of movement authority: the location until which the train is allowed to move&lt;/li>
&lt;li>&lt;code>SvL&lt;/code> supervized location: the protected location&lt;/li>
&lt;/ul>
&lt;h3 id="curves">Curves&lt;/h3>
&lt;ul>
&lt;li>&lt;code>SBD&lt;/code> supervised braking deceleration: intermediary result computed from &lt;code>EOA&lt;/code> and &lt;code>A_brake_service&lt;/code>&lt;/li>
&lt;li>&lt;code>EBD&lt;/code> emergency braking deceleration: intermediary result computed from &lt;code>SvL&lt;/code> and &lt;code>A_brake_safe&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>All the curves below are cut below a given release speed:&lt;/p>
&lt;ul>
&lt;li>&lt;code>EBI&lt;/code> (emergency break intervention) computed from &lt;code>EBD&lt;/code>, shifted in position and space given rolling stock metadata&lt;/li>
&lt;li>&lt;code>SBI1&lt;/code> computed from &lt;code>SBD&lt;/code>, shifted in &lt;strong>time&lt;/strong> with &lt;code>Tbs1&lt;/code>&lt;/li>
&lt;li>&lt;code>SBI2&lt;/code> computed from &lt;code>SBD&lt;/code>, shifted in &lt;strong>time&lt;/strong> with &lt;code>Tbs2&lt;/code>&lt;/li>
&lt;li>&lt;code>FLOI&lt;/code> (also called &lt;code>SBI&lt;/code>, the intervention curve) the minimum of &lt;code>SBI1&lt;/code> and &lt;code>SBI2&lt;/code>&lt;/li>
&lt;li>&lt;code>WARNING&lt;/code> (warning curve) computed as a shift of &lt;code>FLOI&lt;/code> by &lt;code>Twarning&lt;/code>&lt;/li>
&lt;li>&lt;code>PS&lt;/code> (permitted speed curve): shift of &lt;code>WARNING&lt;/code> by time &lt;code>Tdriver&lt;/code>&lt;/li>
&lt;li>&lt;code>INDICATION&lt;/code> is a shift of &lt;code>PS&lt;/code> by time &lt;code>Tindication&lt;/code>&lt;/li>
&lt;/ul></description></item></channel></rss>